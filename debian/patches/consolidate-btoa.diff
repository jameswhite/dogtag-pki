commit 970e3667eede41e72bb5a4cadf1d056ff526d944
Author: Endi Sukma Dewata <edewata@redhat.com>
Date:   Wed Feb 15 15:01:42 2012 -0600

    Consolidated BtoA/AtoB invocations.
    
    The OSUtil's BtoA() and AtoB() have been replaced with wrapper
    methods in com.netscape.cmsutil.util.Utils to simplify transition
    into Base64 codec from Apache Commons library.
    
    Ticket #90

--- a/pki/base/ca/src/com/netscape/ca/CAService.java
+++ b/pki/base/ca/src/com/netscape/ca/CAService.java
@@ -35,6 +35,7 @@
 import com.netscape.cmscore.dbs.*;
 import com.netscape.cmscore.crmf.*;
 import com.netscape.cmscore.util.Debug;
+import com.netscape.cmsutil.util.Utils;
 
 import netscape.security.x509.*;
 import netscape.security.util.BigInt;
@@ -1621,7 +1622,7 @@
     private String hashPassword(String pwd) {
         String salt = "lala123";
         byte[] pwdDigest = mSHADigest.digest((salt + pwd).getBytes());
-        String b64E = com.netscape.osutil.OSUtil.BtoA(pwdDigest);
+        String b64E = Utils.base64encode(pwdDigest);
 
         return "{SHA}" + b64E;
     }
--- a/pki/base/common/src/com/netscape/certsrv/base/KeyGenInfo.java
+++ b/pki/base/common/src/com/netscape/certsrv/base/KeyGenInfo.java
@@ -17,7 +17,7 @@
 // --- END COPYRIGHT BLOCK ---
 package com.netscape.certsrv.base;
 
-
+import com.netscape.cmsutil.util.Utils;
 import java.lang.*;
 import java.io.IOException;
 import netscape.security.util.*;
@@ -194,7 +194,7 @@
     private byte[] base64Decode(String spkac)
         throws  IOException {
 
-        return com.netscape.osutil.OSUtil.AtoB(spkac);
+        return Utils.base64decode(spkac);
     }
 
     private void derDecode(byte spkac[])
--- a/pki/base/common/src/com/netscape/cms/authentication/HashAuthentication.java
+++ b/pki/base/common/src/com/netscape/cms/authentication/HashAuthentication.java
@@ -203,7 +203,7 @@
     public String hashFingerprint(String host, String pageID, String uid) {
         byte[] hash = 
             mSHADigest.digest((SALT + pageID + getSecret(host) + uid).getBytes());        
-        String b64E = com.netscape.osutil.OSUtil.BtoA(hash);
+        String b64E = Utils.base64encode(hash);
 
         return "{SHA}" + b64E;
     }
--- a/pki/base/common/src/com/netscape/cms/crl/CMSIssuerAlternativeNameExtension.java
+++ b/pki/base/common/src/com/netscape/cms/crl/CMSIssuerAlternativeNameExtension.java
@@ -45,7 +45,7 @@
 import com.netscape.certsrv.dbs.crldb.*;
 import com.netscape.certsrv.logging.*;
 import com.netscape.certsrv.apps.*;
-
+import com.netscape.cmsutil.util.Utils;
 
 /**
  * This represents a issuer alternative name extension.
@@ -156,7 +156,7 @@
                         } else if (nameType.equalsIgnoreCase(PROP_OTHER_NAME)) {
 
                             try {
-                                byte[] val = com.netscape.osutil.OSUtil.AtoB(name);
+                                byte[] val = Utils.base64decode(name);
                                 DerValue derVal = new DerValue(new ByteArrayInputStream(val));
                                 GeneralName generalName = new GeneralName(derVal);
 
--- a/pki/base/common/src/com/netscape/cms/policy/constraints/RenewalValidityConstraints.java
+++ b/pki/base/common/src/com/netscape/cms/policy/constraints/RenewalValidityConstraints.java
@@ -27,6 +27,7 @@
 import com.netscape.certsrv.common.*;
 import netscape.security.x509.*;
 import com.netscape.cms.policy.APolicyRule;
+import com.netscape.cmsutil.util.Utils;
 
 
 /**
@@ -330,7 +331,7 @@
             sb.append("\n");
             try {
                 byte[] ba = cert.getEncoded();
-                String encodedCert = com.netscape.osutil.OSUtil.BtoA(ba);
+                String encodedCert = Utils.base64encode(ba);
 
                 sb.append(CERT_HEADER + encodedCert + CERT_TRAILER);
             } catch (Exception e) {
--- a/pki/base/common/src/com/netscape/cms/publish/publishers/FileBasedPublisher.java
+++ b/pki/base/common/src/com/netscape/cms/publish/publishers/FileBasedPublisher.java
@@ -30,6 +30,7 @@
 import com.netscape.certsrv.ldap.*;
 import com.netscape.certsrv.publish.*;
 import org.mozilla.jss.util.Base64OutputStream;
+import com.netscape.cmsutil.util.Utils;
 
 /** 
  * This publisher writes certificate and CRL into
@@ -349,7 +350,7 @@
                 ByteArrayOutputStream os = new ByteArrayOutputStream();
 
                  fos = new FileOutputStream(tempFile);
-                fos.write(com.netscape.osutil.OSUtil.BtoA(encodedArray).getBytes());
+                fos.write(Utils.base64encode(encodedArray).getBytes());
                 fos.close();
                 destName = baseName + ".b64";
                 destFile = new File(destName);
--- a/pki/base/common/src/com/netscape/cms/servlet/admin/AdminServlet.java
+++ b/pki/base/common/src/com/netscape/cms/servlet/admin/AdminServlet.java
@@ -36,6 +36,7 @@
 import com.netscape.certsrv.usrgrp.*;
 import com.netscape.certsrv.apps.*;
 import com.netscape.cms.servlet.base.*;
+import com.netscape.cmsutil.util.Utils;
 
 
 /**
@@ -349,7 +350,7 @@
                     String authToken = req.getHeader(HDR_AUTHORIZATION);
                     String b64s = authToken.substring(
                             authToken.lastIndexOf(' ') + 1);
-                    String authCode = new String(com.netscape.osutil.OSUtil.AtoB(b64s));
+                    String authCode = new String(Utils.base64decode(b64s));
                     String userid = authCode.substring(0,
                             authCode.lastIndexOf(':'));
                     String password = authCode.substring(
--- a/pki/base/common/src/com/netscape/cms/servlet/admin/CMSAdminServlet.java
+++ b/pki/base/common/src/com/netscape/cms/servlet/admin/CMSAdminServlet.java
@@ -2612,7 +2612,7 @@
             byte[] bCert = null;
 
             try {
-                bCert = (byte[]) (com.netscape.osutil.OSUtil.AtoB(b64Cert));
+                bCert = Utils.base64decode(b64Cert);
             } catch (Exception e) {
                 CMS.debug("CMSAdminServlet: exception: " + e.toString());
             }
@@ -3679,7 +3679,7 @@
         if (rawData != null) {
             String base64Data = null;
 
-            base64Data = com.netscape.osutil.OSUtil.BtoA(rawData).trim();
+            base64Data = Utils.base64encode(rawData).trim();
 
             // extract all line separators from the "base64Data"
             for (int i = 0; i < base64Data.length(); i++) {
--- a/pki/base/common/src/com/netscape/cms/servlet/admin/UsrGrpAdminServlet.java
+++ b/pki/base/common/src/com/netscape/cms/servlet/admin/UsrGrpAdminServlet.java
@@ -1064,7 +1064,7 @@
             // Base64 decode cert
 
             try {
-                byte bCert[] = (byte[]) (com.netscape.osutil.OSUtil.AtoB(certsString));
+                byte bCert[] = Utils.base64decode(certsString);
                 X509Certificate cert = new X509CertImpl(bCert);
 
                 certs = new X509Certificate[1];
@@ -1075,7 +1075,7 @@
 
                 // could it be a pkcs7 blob?
                 CMS.debug("UsrGrpAdminServlet: " + CMS.getLogMessage("ADMIN_SRVLT_IS_PK_BLOB"));
-                byte p7Cert[] = (byte[]) (com.netscape.osutil.OSUtil.AtoB(certsString));
+                byte p7Cert[] = Utils.base64decode(certsString);
 
                 try {
                     CryptoManager manager = CryptoManager.getInstance();
--- a/pki/base/common/src/com/netscape/cms/servlet/base/CMSServlet.java
+++ b/pki/base/common/src/com/netscape/cms/servlet/base/CMSServlet.java
@@ -19,6 +19,7 @@
 
 import com.netscape.cms.servlet.common.*;
 import com.netscape.cms.servlet.common.AuthCredentials;
+import com.netscape.cmsutil.util.Utils;
 import com.netscape.cmsutil.xml.*;
 import com.netscape.certsrv.base.SessionContext;
 import java.io.*;
@@ -1578,7 +1579,7 @@
     protected String hashPassword(String pwd) {
         String salt = generateSalt();
         byte[] pwdDigest = mSHADigest.digest((salt + pwd).getBytes());
-        String b64E = com.netscape.osutil.OSUtil.BtoA(pwdDigest);
+        String b64E = Utils.base64encode(pwdDigest);
 
         return "{SHA}" + salt + ";" + b64E;
     }
--- a/pki/base/common/src/com/netscape/cms/servlet/cert/CMCRevReqServlet.java
+++ b/pki/base/common/src/com/netscape/cms/servlet/cert/CMCRevReqServlet.java
@@ -56,7 +56,7 @@
 import com.netscape.certsrv.logging.*;
 
 import com.netscape.certsrv.publish.*;
-
+import com.netscape.cmsutil.util.Utils;
 
 /**
  * Revoke a certificate with a CMC-formatted revocation request
@@ -578,7 +578,7 @@
                     String b64eCert = req.getParameter("b64eCertificate");
 
                     if (b64eCert != null) {
-                        byte[] certBytes = com.netscape.osutil.OSUtil.AtoB(b64eCert);
+                        byte[] certBytes = Utils.base64decode(b64eCert);
                         X509CertImpl cert = new X509CertImpl(certBytes);
                         IArgBlock rarg = CMS.createArgBlock();
 
--- a/pki/base/common/src/com/netscape/cms/servlet/cert/ChallengeRevocationServlet1.java
+++ b/pki/base/common/src/com/netscape/cms/servlet/cert/ChallengeRevocationServlet1.java
@@ -49,7 +49,7 @@
 import com.netscape.certsrv.authentication.*;
 import com.netscape.certsrv.logging.*;
 import com.netscape.certsrv.publish.*;
-
+import com.netscape.cmsutil.util.Utils;
 
 /**
  * Takes the certificate info (serial number) and optional challenge phrase, creates a 
@@ -411,7 +411,7 @@
                     String b64eCert = req.getParameter("b64eCertificate");
 
                     if (b64eCert != null) {
-                        byte[] certBytes = com.netscape.osutil.OSUtil.AtoB(b64eCert);
+                        byte[] certBytes = Utils.base64decode(b64eCert);
                         X509CertImpl cert = new X509CertImpl(certBytes);
                         IArgBlock rarg = CMS.createArgBlock();
 
--- a/pki/base/common/src/com/netscape/cms/servlet/cert/DisplayBySerial.java
+++ b/pki/base/common/src/com/netscape/cms/servlet/cert/DisplayBySerial.java
@@ -48,7 +48,7 @@
 import com.netscape.certsrv.authentication.*;
 import com.netscape.certsrv.authorization.*;
 import com.netscape.cms.servlet.*;
-
+import com.netscape.cmsutil.util.Utils;
 
 /**
  * Display detailed information about a certificate
@@ -356,7 +356,7 @@
             byte[] ba = cert.getEncoded();
             // Do base 64 encoding
 
-            header.addStringValue("certChainBase64", com.netscape.osutil.OSUtil.BtoA(ba));
+            header.addStringValue("certChainBase64", Utils.base64encode(ba));
             header.addStringValue("serialNumber", seq.toString(16));
 
             /*
@@ -401,7 +401,7 @@
                 p7.encodeSignedData(bos,false);
                 byte[] p7Bytes = bos.toByteArray();
 
-				p7Str = com.netscape.osutil.OSUtil.BtoA(p7Bytes);
+				p7Str = Utils.base64encode(p7Bytes);
                 header.addStringValue("pkcs7ChainBase64", p7Str);
             } catch (Exception e) {
                 //p7Str = "PKCS#7 B64 Encoding error - " + e.toString() 
--- a/pki/base/common/src/com/netscape/cms/servlet/cert/DisplayCRL.java
+++ b/pki/base/common/src/com/netscape/cms/servlet/cert/DisplayCRL.java
@@ -43,7 +43,7 @@
 import com.netscape.certsrv.authorization.*;
 
 import com.netscape.cms.servlet.*;
-
+import com.netscape.cmsutil.util.Utils;
 
 /**
  * Decode the CRL and display it to the requester.
@@ -336,7 +336,7 @@
             } else if (crlDisplayType.equals("base64Encoded")) {
                 try {
                     byte[] ba = crl.getEncoded();
-                    String crlBase64Encoded = com.netscape.osutil.OSUtil.BtoA(ba);
+                    String crlBase64Encoded = Utils.base64encode(ba);
                     int length = crlBase64Encoded.length();
                     int i = 0;
                     int j = 0;
@@ -408,7 +408,7 @@
 
                                 try {
                                     byte[] ba = deltaCRL.getEncoded();
-                                    String crlBase64Encoded = com.netscape.osutil.OSUtil.BtoA(ba);
+                                    String crlBase64Encoded = Utils.base64encode(ba);
                                     int length = crlBase64Encoded.length();
                                     int i = 0;
                                     int j = 0;
--- a/pki/base/common/src/com/netscape/cms/servlet/cert/EnrollServlet.java
+++ b/pki/base/common/src/com/netscape/cms/servlet/cert/EnrollServlet.java
@@ -66,7 +66,7 @@
 import com.netscape.certsrv.ca.*;
 import com.netscape.certsrv.dbs.certdb.*;
 import java.math.*;
-
+import com.netscape.cmsutil.util.Utils;
 
 /**
  * Submit a Certificate Enrollment request
@@ -1803,7 +1803,7 @@
         if (rawData != null) {
             String base64Data = null;
 
-            base64Data = com.netscape.osutil.OSUtil.BtoA(rawData).trim();
+            base64Data = Utils.base64encode(rawData).trim();
 
             StringBuffer sb = new StringBuffer();
             // extract all line separators from the "base64Data"
--- a/pki/base/common/src/com/netscape/cms/servlet/cert/GetCRL.java
+++ b/pki/base/common/src/com/netscape/cms/servlet/cert/GetCRL.java
@@ -46,7 +46,7 @@
 import com.netscape.certsrv.authentication.*;
 import com.netscape.certsrv.authorization.*;
 import com.netscape.cms.servlet.*;
-
+import com.netscape.cmsutil.util.Utils;
 
 /**
  * Retrieve CRL for a Certificate Authority
@@ -336,7 +336,7 @@
                 } else if (crlDisplayType.equals("base64Encoded")) {
                     try {
                         byte[] ba = crl.getEncoded();
-                        String crlBase64Encoded = com.netscape.osutil.OSUtil.BtoA(ba);
+                        String crlBase64Encoded = Utils.base64encode(ba);
                         int length = crlBase64Encoded.length();
                         int i = 0;
                         int j = 0;
@@ -376,7 +376,7 @@
 
                     try {
                         byte[] ba = crl.getEncoded();
-                        String crlBase64Encoded = com.netscape.osutil.OSUtil.BtoA(ba);
+                        String crlBase64Encoded = Utils.base64encode(ba);
                         int length = crlBase64Encoded.length();
                         int i = 0;
                         int j = 0;
--- a/pki/base/common/src/com/netscape/cms/servlet/cert/ImportCertsTemplateFiller.java
+++ b/pki/base/common/src/com/netscape/cms/servlet/cert/ImportCertsTemplateFiller.java
@@ -20,7 +20,8 @@
 
 import com.netscape.cms.servlet.common.*;
 import com.netscape.cms.servlet.base.*;
- 
+import com.netscape.cmsutil.util.Utils;
+
 import java.util.Locale;
 import java.math.BigInteger;
 import java.io.ByteArrayOutputStream;
@@ -343,7 +344,7 @@
 
             certRepContent.encode(certRepOut);
             byte[] certRepBytes = certRepOut.toByteArray();
-            String certRepB64 = com.netscape.osutil.OSUtil.BtoA(certRepBytes);
+            String certRepB64 = Utils.base64encode(certRepBytes);
             // add CR to each return as required by cartman
             BufferedReader certRepB64lines = 
                 new BufferedReader(new StringReader(certRepB64));
--- a/pki/base/common/src/com/netscape/cms/servlet/cert/RevocationServlet.java
+++ b/pki/base/common/src/com/netscape/cms/servlet/cert/RevocationServlet.java
@@ -20,6 +20,7 @@
 
 import com.netscape.cms.servlet.common.*;
 import com.netscape.cms.servlet.base.*;
+import com.netscape.cmsutil.util.Utils;
 
 import java.util.Enumeration;
 import java.util.Locale;
@@ -273,7 +274,7 @@
                 byte[] ba = old_cert.getEncoded();
                 // Do base 64 encoding
 
-                header.addStringValue("b64eCertificate", com.netscape.osutil.OSUtil.BtoA(ba));
+                header.addStringValue("b64eCertificate", Utils.base64encode(ba));
             } catch (CertificateEncodingException e) {
             }
         }
--- a/pki/base/common/src/com/netscape/cms/servlet/cert/scep/CRSEnrollment.java
+++ b/pki/base/common/src/com/netscape/cms/servlet/cert/scep/CRSEnrollment.java
@@ -49,6 +49,7 @@
 import org.mozilla.jss.crypto.*;
 import org.mozilla.jss.pkix.cert.Certificate;
 import com.netscape.cmsutil.scep.CRSPKIMessage;
+import com.netscape.cmsutil.util.Utils;
 
 
 /**
@@ -518,7 +519,7 @@
       byte[] response=null;
       String responseData = "";
         
-      decodedPKIMessage = com.netscape.osutil.OSUtil.AtoB(msg);
+      decodedPKIMessage = Utils.base64decode(msg);
             
       try {
           ByteArrayInputStream is = new ByteArrayInputStream(decodedPKIMessage);
@@ -764,7 +765,7 @@
       byte[] response=null;
       X509CertImpl cert = null;
         
-      decodedPKIMessage = com.netscape.osutil.OSUtil.AtoB(msg);
+      decodedPKIMessage = Utils.base64decode(msg);
             
       try {
           ByteArrayInputStream is = new ByteArrayInputStream(decodedPKIMessage);
@@ -1791,7 +1792,7 @@
    protected String hashPassword(String pwd) {
         String salt = "lala123";
         byte[] pwdDigest = mSHADigest.digest((salt+pwd).getBytes());
-        String b64E = com.netscape.osutil.OSUtil.BtoA(pwdDigest);
+        String b64E = Utils.base64encode(pwdDigest);
         return "{SHA}"+b64E;
     }
 
--- a/pki/base/common/src/com/netscape/cms/servlet/connector/ConnectorServlet.java
+++ b/pki/base/common/src/com/netscape/cms/servlet/connector/ConnectorServlet.java
@@ -19,6 +19,7 @@
 
 import com.netscape.cms.servlet.common.*;
 import com.netscape.cms.servlet.base.*;
+import com.netscape.cmsutil.util.Utils;
 
 import javax.servlet.*;
 import javax.servlet.http.*;
@@ -1064,7 +1065,7 @@
         if (rawData != null) {
             String base64Data = null;
 
-            base64Data = com.netscape.osutil.OSUtil.BtoA(rawData).trim();
+            base64Data = Utils.base64encode(rawData).trim();
 
             StringBuffer sb = new StringBuffer();
             // extract all line separators from the "base64Data"
--- a/pki/base/common/src/com/netscape/cms/servlet/csadmin/RegisterUser.java
+++ b/pki/base/common/src/com/netscape/cms/servlet/csadmin/RegisterUser.java
@@ -20,6 +20,7 @@
 
 import com.netscape.cms.servlet.common.*;
 import com.netscape.cms.servlet.base.*;
+import com.netscape.cmsutil.util.Utils;
 import java.io.*;
 import java.util.*;
 import javax.servlet.*;
@@ -163,7 +164,7 @@
 
           byte bCert[] = null;
           X509CertImpl cert = null;
-          bCert = (byte[]) (com.netscape.osutil.OSUtil.AtoB(certsString));
+          bCert = Utils.base64decode(certsString);
           cert = new X509CertImpl(bCert);
           certs[0] = (X509Certificate)cert;
 
--- a/pki/base/common/src/com/netscape/cms/servlet/ocsp/OCSPServlet.java
+++ b/pki/base/common/src/com/netscape/cms/servlet/ocsp/OCSPServlet.java
@@ -52,7 +52,7 @@
 import com.netscape.certsrv.authorization.*;
 import com.netscape.cmsutil.ocsp.*;
 import com.netscape.certsrv.base.*;
-
+import com.netscape.cmsutil.util.Utils;
 
 /**
  * Process OCSP messages, According to RFC 2560
@@ -178,7 +178,7 @@
                   throw new Exception("OCSPServlet: OCSP request not provided in GET method");
               }
               is = new ByteArrayInputStream(
-                com.netscape.osutil.OSUtil.AtoB(pathInfo.substring(1)));
+                Utils.base64decode(pathInfo.substring(1)));
             }
 
             // (1) retrieve OCSP request
--- a/pki/base/common/src/com/netscape/cms/servlet/profile/ProfileProcessServlet.java
+++ b/pki/base/common/src/com/netscape/cms/servlet/profile/ProfileProcessServlet.java
@@ -35,6 +35,7 @@
 import com.netscape.certsrv.logging.*;
 import com.netscape.certsrv.ca.*;
 import com.netscape.cms.servlet.common.*;
+import com.netscape.cmsutil.util.Utils;
 
 import java.security.cert.*;
 import netscape.security.x509.*;
@@ -908,7 +909,7 @@
         if (rawData != null) {
             String base64Data = null;
 
-            base64Data = com.netscape.osutil.OSUtil.BtoA(rawData).trim();
+            base64Data = Utils.base64encode(rawData).trim();
 
             // extract all line separators from the "base64Data"
             StringBuffer sb = new StringBuffer();
--- a/pki/base/common/src/com/netscape/cms/servlet/profile/ProfileSubmitCMCServlet.java
+++ b/pki/base/common/src/com/netscape/cms/servlet/profile/ProfileSubmitCMCServlet.java
@@ -38,7 +38,7 @@
 import org.mozilla.jss.pkix.cmc.*;
 
 import netscape.security.x509.*;
-
+import com.netscape.cmsutil.util.Utils;
 
 /**
  * This servlet submits end-user request into the profile framework.
@@ -229,7 +229,7 @@
             }
         }
 
-        requestB64 = com.netscape.osutil.OSUtil.BtoA(reqbuf);
+        requestB64 = Utils.base64encode(reqbuf);
 
         if (CMS.debugOn()) {
             CMS.debug("Start of ProfileSubmitCMCServlet Input Parameters");
@@ -850,7 +850,7 @@
         if (rawData != null) {
             String base64Data = null;
 
-            base64Data = com.netscape.osutil.OSUtil.BtoA(rawData).trim();
+            base64Data = Utils.base64encode(rawData).trim();
 
             // extract all line separators from the "base64Data"
             StringBuffer sb = new StringBuffer();
--- a/pki/base/common/src/com/netscape/cms/servlet/profile/ProfileSubmitServlet.java
+++ b/pki/base/common/src/com/netscape/cms/servlet/profile/ProfileSubmitServlet.java
@@ -1566,7 +1566,7 @@
         if (rawData != null) {
             String base64Data = null;
 
-            base64Data = com.netscape.osutil.OSUtil.BtoA(rawData).trim();
+            base64Data = Utils.base64encode(rawData).trim();
 
             // extract all line separators from the "base64Data"
             StringBuffer sb = new StringBuffer();
--- a/pki/base/common/src/com/netscape/cms/servlet/request/ProcessCertReq.java
+++ b/pki/base/common/src/com/netscape/cms/servlet/request/ProcessCertReq.java
@@ -44,7 +44,7 @@
 import com.netscape.certsrv.usrgrp.*;
 import com.netscape.certsrv.common.*;
 import com.netscape.certsrv.logging.*;
-
+import com.netscape.cmsutil.util.Utils;
 
 /**
  * Agent operations on Certificate requests. This servlet is used
@@ -596,7 +596,7 @@
                             if (addExts != null && !addExts.trim().equals("")) {
                                 Vector extsToBeAdded = new Vector();
 
-                                byte[] b = (byte[]) (com.netscape.osutil.OSUtil.AtoB(addExts));
+                                byte[] b = Utils.base64decode(addExts);
 
                                 // this b can be "Extension" Or "SEQUENCE OF Extension"
                                 try {
@@ -1823,7 +1823,7 @@
         if (rawData != null) {
             String base64Data = null;
 
-            base64Data = com.netscape.osutil.OSUtil.BtoA(rawData).trim();
+            base64Data = Utils.base64encode(rawData).trim();
 
             // extract all line separators from the "base64Data"
             StringBuffer sb = new StringBuffer();
--- a/pki/base/common/src/com/netscape/cmscore/apps/CMSEngine.java
+++ b/pki/base/common/src/com/netscape/cmscore/apps/CMSEngine.java
@@ -93,7 +93,7 @@
 import com.netscape.cmscore.usrgrp.UGSubsystem;
 import com.netscape.cmscore.request.RequestSubsystem;
 import com.netscape.cmscore.jobs.JobsScheduler;
-import com.netscape.osutil.*;
+import com.netscape.cmsutil.util.Utils;
 
 import com.netscape.cmscore.cert.OidLoaderSubsystem;
 import com.netscape.cmscore.cert.X500NameSubsystem;
@@ -1329,11 +1329,11 @@
     }
 
     public String BtoA(byte data[]) {
-        return OSUtil.BtoA(data);
+        return Utils.base64encode(data);
     }
 
     public byte[] AtoB(String data) {
-        return OSUtil.AtoB(data);
+        return Utils.base64decode(data);
     }
 
     public String getEncodedCert(X509Certificate cert) {
--- a/pki/base/common/src/com/netscape/cmscore/authentication/ChallengePhraseAuthentication.java
+++ b/pki/base/common/src/com/netscape/cmscore/authentication/ChallengePhraseAuthentication.java
@@ -35,7 +35,7 @@
 import com.netscape.certsrv.apps.*;
 import com.netscape.cmscore.dbs.*;
 import com.netscape.cmscore.util.*;
-
+import com.netscape.cmsutil.util.Utils;
 
 /**
  * Challenge phrase based authentication.
@@ -401,7 +401,7 @@
     private String hashPassword(String pwd) {
         String salt = "lala123";
         byte[] pwdDigest = mSHADigest.digest((salt + pwd).getBytes());
-        String b64E = com.netscape.osutil.OSUtil.BtoA(pwdDigest);
+        String b64E = Utils.base64encode(pwdDigest);
 
         return "{SHA}" + b64E;
     }
--- a/pki/base/common/src/com/netscape/cmscore/base/ArgBlock.java
+++ b/pki/base/common/src/com/netscape/cmscore/base/ArgBlock.java
@@ -25,7 +25,7 @@
 import java.math.BigInteger;
 import com.netscape.certsrv.base.*;
 import com.netscape.certsrv.apps.CMS;
-
+import com.netscape.cmsutil.util.Utils;
 
 /**
  * This class represents a set of indexed arguments. 
@@ -693,7 +693,7 @@
         PKCS10 pkcs10 = null;
 
         try {
-            byte[] decodedBytes = com.netscape.osutil.OSUtil.AtoB(base64Request);
+            byte[] decodedBytes = Utils.base64decode(base64Request);
 
             pkcs10 = new PKCS10(decodedBytes);
         } catch (NoSuchProviderException e) { 
--- a/pki/base/common/src/com/netscape/cmscore/base/PropConfigStore.java
+++ b/pki/base/common/src/com/netscape/cmscore/base/PropConfigStore.java
@@ -24,7 +24,7 @@
 import org.mozilla.jss.util.Base64OutputStream;
 import com.netscape.certsrv.base.*;
 import com.netscape.certsrv.apps.CMS;
-
+import com.netscape.cmsutil.util.Utils;
 
 /**
  * A class represents a in-memory configuration store.
@@ -326,7 +326,7 @@
             else {
 				CMS.traceHashKey(mDebugType,getFullName(name),
 					"<bytearray>","<bytearray>");
-                return com.netscape.osutil.OSUtil.AtoB(str);
+                return Utils.base64decode(str);
 			}
     }
 
--- a/pki/base/common/src/com/netscape/cmscore/cert/CertUtils.java
+++ b/pki/base/common/src/com/netscape/cmscore/cert/CertUtils.java
@@ -26,7 +26,7 @@
 import netscape.security.extensions.*;
 import netscape.security.util.*;
 import com.netscape.cmscore.util.*;
-import com.netscape.osutil.*;
+import com.netscape.cmsutil.util.Utils;
 import com.netscape.certsrv.base.*;
 import com.netscape.certsrv.apps.CMS;
 import com.netscape.certsrv.logging.ILogger;
@@ -135,7 +135,7 @@
         PKCS10 pkcs10 = null;
 
         try {
-            byte[] decodedBytes = com.netscape.osutil.OSUtil.AtoB(normalized);
+            byte[] decodedBytes = Utils.base64decode(normalized);
 
             pkcs10 = new PKCS10(decodedBytes);
         } catch (Exception e) {
@@ -525,7 +525,7 @@
         try {
             return 
                 "-----BEGIN CERTIFICATE-----\n" +
-                com.netscape.osutil.OSUtil.BtoA(cert.getEncoded()) +
+                Utils.base64encode(cert.getEncoded()) +
                 "-----END CERTIFICATE-----\n";
         } catch (CertificateException e) {
         }
@@ -536,7 +536,7 @@
         throws IOException {
         mime64 = stripCertBrackets(mime64.trim());
         String newval = normalizeCertStr(mime64);
-        byte rawPub[] = com.netscape.osutil.OSUtil.AtoB(newval);
+        byte rawPub[] = Utils.base64decode(newval);
         X509Certificate cert = null;
 
         try {
@@ -550,7 +550,7 @@
         throws IOException {
         mime64 = stripCertBrackets(mime64.trim());
         String newval = normalizeCertStr(mime64);
-        byte rawPub[] = com.netscape.osutil.OSUtil.AtoB(newval);
+        byte rawPub[] = Utils.base64decode(newval);
         PKCS7 p7 = null;
 
         try {
@@ -565,7 +565,7 @@
         throws IOException {
         mime64 = stripCRLBrackets(mime64.trim());
         String newval = normalizeCertStr(mime64);
-        byte rawPub[] = com.netscape.osutil.OSUtil.AtoB(newval);
+        byte rawPub[] = Utils.base64decode(newval);
         X509CRL crl = null;
 
         try {
@@ -578,7 +578,7 @@
     public static X509CRL mapCRL1(String mime64) 
         throws IOException {
         mime64 = stripCRLBrackets(mime64.trim());
-        byte rawPub[] = OSUtil.AtoB(mime64);
+        byte rawPub[] = Utils.base64decode(mime64);
         X509CRL crl = null;
 
         try {
--- a/pki/base/common/src/com/netscape/cmscore/connector/HttpRequestEncoder.java
+++ b/pki/base/common/src/com/netscape/cmscore/connector/HttpRequestEncoder.java
@@ -21,6 +21,7 @@
 import com.netscape.certsrv.request.*;
 import com.netscape.certsrv.connector.*;
 import com.netscape.cmscore.util.Debug;
+import com.netscape.cmsutil.util.Utils;
 
 import java.io.*;
 
@@ -38,7 +39,7 @@
 
         os.writeObject(r);
         serial = ba.toByteArray();
-        s = com.netscape.osutil.OSUtil.BtoA(serial);
+        s = Utils.base64encode(serial);
         return s;
     }
 
@@ -49,7 +50,7 @@
 
         try {
 
-            serial = com.netscape.osutil.OSUtil.AtoB(s);
+            serial = Utils.base64decode(s);
             ByteArrayInputStream ba = new ByteArrayInputStream(serial);
             ObjectInputStream is = new ObjectInputStream(ba);
 
--- a/pki/base/common/src/com/netscape/cmscore/policy/GeneralNameUtil.java
+++ b/pki/base/common/src/com/netscape/cmscore/policy/GeneralNameUtil.java
@@ -29,6 +29,7 @@
 import com.netscape.certsrv.base.*;
 import com.netscape.certsrv.policy.*;
 import com.netscape.cmscore.util.Debug;
+import com.netscape.cmsutil.util.Utils;
 
 
 /** 
@@ -82,7 +83,7 @@
 
         try {
             if (generalNameChoice.equalsIgnoreCase(GENNAME_CHOICE_OTHERNAME)) {
-                byte[] val = com.netscape.osutil.OSUtil.AtoB(value);
+                byte[] val = Utils.base64decode(value);
 
                 derVal = new DerValue(new ByteArrayInputStream(val));
                 Debug.trace("otherName formed");
--- a/pki/base/common/src/com/netscape/cmscore/security/JssSubsystem.java
+++ b/pki/base/common/src/com/netscape/cmscore/security/JssSubsystem.java
@@ -54,7 +54,7 @@
 import com.netscape.cmscore.util.Debug;
 import netscape.ldap.util.*;
 import com.netscape.cmsutil.crypto.*;
-
+import com.netscape.cmsutil.util.Utils;
 
 /**
  * Subsystem for initializing JSS>
@@ -1614,7 +1614,7 @@
             DN dn = new DN(principal.getName());
             BigInteger serialno = cert.getSerialNumber();
             String suffix = "." + System.currentTimeMillis();
-            String b64E = com.netscape.osutil.OSUtil.BtoA(cert.getEncoded());
+            String b64E = Utils.base64encode(cert.getEncoded());
             PrintStream stream = new PrintStream(new FileOutputStream(pathname + suffix));
 
             stream.println("-----BEGIN CERTIFICATE-----");
@@ -1975,7 +1975,7 @@
                 String content = "";
                 String noHeader = CertUtils.stripCertBrackets(b64E);
                 String normalized = CertUtils.normalizeCertStr(noHeader);
-                byte data[] = com.netscape.osutil.OSUtil.AtoB(normalized);
+                byte data[] = Utils.base64decode(normalized);
 
                 ContentInfo ci = (ContentInfo)
                     ASN1Util.decode(ContentInfo.getTemplate(), data);
--- a/pki/base/common/src/com/netscape/cmscore/security/KeyCertUtil.java
+++ b/pki/base/common/src/com/netscape/cmscore/security/KeyCertUtil.java
@@ -60,7 +60,7 @@
 import com.netscape.cmscore.util.*;
 import com.netscape.cmscore.dbs.*;
 import com.netscape.cmsutil.crypto.*;
-
+import com.netscape.cmsutil.util.Utils;
 
 /**
  * This class provides all the base methods to generate the key for different
@@ -83,7 +83,7 @@
         if (ext != null) {
             try {
 
-                b = (byte[]) (com.netscape.osutil.OSUtil.AtoB(ext));
+                b = Utils.base64decode(ext);
                 // this b can be "Extension" Or "SEQUENCE OF Extension"
                 DerValue b_der = new DerValue(b);
 
@@ -708,7 +708,7 @@
     public static byte[] convertB64EToByteArray(String b64E)
         throws CertificateException, IOException {
         String str = CertUtils.stripCertBrackets(b64E);
-        byte bCert[] = (byte[]) (com.netscape.osutil.OSUtil.AtoB(str));
+        byte bCert[] = Utils.base64decode(str);
 
         /*
          java.security.cert.X509Certificate cert = 
@@ -751,7 +751,7 @@
         String b64E = properties.getDerExtension();
 
         if (b64E != null) {
-            byte[] b = (byte[]) (com.netscape.osutil.OSUtil.AtoB(b64E));
+            byte[] b = Utils.base64decode(b64E);
 
             // this b can be "Extension" Or "SEQUENCE OF Extension"
             try {
--- a/pki/base/common/src/com/netscape/cmscore/security/PWsdrCache.java
+++ b/pki/base/common/src/com/netscape/cmscore/security/PWsdrCache.java
@@ -180,7 +180,7 @@
     }
 
     public byte[] base64Decode(String s) throws IOException {
-         byte[] d = com.netscape.osutil.OSUtil.AtoB(s);
+         byte[] d = Utils.base64decode(s);
          return d;
     }
 
--- a/pki/base/java-tools/src/com/netscape/cmstools/AtoB.java
+++ b/pki/base/java-tools/src/com/netscape/cmstools/AtoB.java
@@ -21,6 +21,8 @@
 import java.io.*;
 
 
+import com.netscape.cmsutil.util.Utils;
+
 /**
  * The AtoB class is a utility program designed to "translate" an ASCII
  * BASE 64 encoded blob into a BINARY BASE 64 encoded blob.  It assumes
@@ -108,7 +110,7 @@
         // (5) Decode the ASCII BASE 64 blob enclosed in the
         //     String() object into a BINARY BASE 64 byte[] object
 
-        binaryBASE64Blob = com.netscape.osutil.OSUtil.AtoB(asciiBASE64Blob);
+        binaryBASE64Blob = Utils.base64decode(asciiBASE64Blob);
 
         // (6) Finally, print the actual AtoB blob to the
         //     specified output file
--- a/pki/base/java-tools/src/com/netscape/cmstools/AuditVerify.java
+++ b/pki/base/java-tools/src/com/netscape/cmstools/AuditVerify.java
@@ -28,6 +28,8 @@
 import java.security.interfaces.*;
 import netscape.security.x509.X509CertImpl;
 
+import com.netscape.cmsutil.util.Utils;
+
 /**
  * Tool for verifying signed audit logs
  * 
@@ -43,7 +45,7 @@
     public static final String CRYPTO_PROVIDER = "Mozilla-JSS";
 
     public static byte[] base64decode(String input) throws Exception {
-        return com.netscape.osutil.OSUtil.AtoB(input);
+        return Utils.base64decode(input);
     }
 
     // We always sign 0x0a as the line separator, regardless of what
--- a/pki/base/java-tools/src/com/netscape/cmstools/BtoA.java
+++ b/pki/base/java-tools/src/com/netscape/cmstools/BtoA.java
@@ -21,6 +21,8 @@
 import java.io.*;
 
 
+import com.netscape.cmsutil.util.Utils;
+
 /**
  * The BtoA class is a utility program designed to "translate" a BINARY
  * BASE 64 encoded blob into an ASCII BASE 64 encoded blob.  It assumes
@@ -86,7 +88,7 @@
         try {
             byte data[] = new byte[inputBlob.available()];
             inputBlob.read(data);
-            String out = com.netscape.osutil.OSUtil.BtoA(data);
+            String out = Utils.base64encode(data);
             outputBlob.write(out.getBytes());
         } catch (IOException e) {
             System.out.println("BtoA():  Unexpected BASE64 " +
--- a/pki/base/java-tools/src/com/netscape/cmstools/CMCEnroll.java
+++ b/pki/base/java-tools/src/com/netscape/cmstools/CMCEnroll.java
@@ -49,6 +49,8 @@
 
 
 
+import com.netscape.cmsutil.util.Utils;
+
 /**
  * Tool for signing PKCS #10 , return CMC enrollment request
  * 
@@ -126,7 +128,7 @@
             ContentInfo fullEnrollmentReq = null;
 
             try {
-                byte[] decodedBytes = com.netscape.osutil.OSUtil.AtoB(asciiBASE64Blob);
+                byte[] decodedBytes = Utils.base64decode(asciiBASE64Blob);
                 
                 pkcs = new PKCS10(decodedBytes);
             } catch (IOException e) {
@@ -185,7 +187,7 @@
                 dig = salt.getBytes();
             }
 
-            String sn = com.netscape.osutil.OSUtil.BtoA(dig);
+            String sn = Utils.base64encode(dig);
             
             TaggedAttribute senderNonce = new TaggedAttribute(new
                     INTEGER(bpid++),
@@ -273,7 +275,7 @@
                 ByteArrayOutputStream os = new ByteArrayOutputStream();
 
                 fullEnrollmentReq.encode(os);
-                ps.print(com.netscape.osutil.OSUtil.BtoA(os.toByteArray()));
+                ps.print(Utils.base64encode(os.toByteArray()));
                 //fullEnrollmentReq.print(ps); // no header/trailer
             } else {
                 // format is PR_REQUEST_PKCS10
@@ -414,7 +416,7 @@
                 //     String() object into a BINARY BASE 64 byte[] object
                 byte binaryBASE64Blob[] = null;
 
-                binaryBASE64Blob = com.netscape.osutil.OSUtil.AtoB(asciiBASE64Blob);
+                binaryBASE64Blob = Utils.base64decode(asciiBASE64Blob);
                 
                 // (6) Finally, print the actual CMCEnroll blob to the
                 //     specified output file
--- a/pki/base/java-tools/src/com/netscape/cmstools/CMCRequest.java
+++ b/pki/base/java-tools/src/com/netscape/cmstools/CMCRequest.java
@@ -153,7 +153,7 @@
             try {
                 for (int k=0; k<rValue.length; k++) {
                     String asciiBASE64Blob = rValue[k]; 
-                    byte[] decodedBytes = com.netscape.osutil.OSUtil.AtoB(asciiBASE64Blob);
+                    byte[] decodedBytes = Utils.base64decode(asciiBASE64Blob);
                 
                     if (format.equals("crmf")) {
                         ByteArrayInputStream reqBlob = 
@@ -260,7 +260,7 @@
                 ByteArrayOutputStream os = new ByteArrayOutputStream();
 
                 fullEnrollmentReq.encode(os);
-                ps.print(com.netscape.osutil.OSUtil.BtoA(os.toByteArray()));
+                ps.print(Utils.base64encode(os.toByteArray()));
             }
             String asciiBASE64Blob = bs.toString();
 
@@ -723,7 +723,7 @@
                 dig = salt.getBytes();
             }
 
-            sn = com.netscape.osutil.OSUtil.BtoA(dig);
+            sn = Utils.base64encode(dig);
         }
         byte bb[] = sn.getBytes(); 
         System.out.println("SenderNonce control: ");
--- a/pki/base/java-tools/src/com/netscape/cmstools/CMCRevoke.java
+++ b/pki/base/java-tools/src/com/netscape/cmstools/CMCRevoke.java
@@ -49,6 +49,8 @@
 
 
 
+import com.netscape.cmsutil.util.Utils;
+
 /**
  * Tool for signing a CMC revocation request with an agent's certificate.
  * 
@@ -312,7 +314,7 @@
             } catch (NoSuchAlgorithmException ex) {
                 dig = salt.getBytes();
             }
-            String sn = com.netscape.osutil.OSUtil.BtoA(dig);
+            String sn = Utils.base64encode(dig);
 
             TaggedAttribute senderNonce = new TaggedAttribute(new INTEGER(bpid++), OBJECT_IDENTIFIER.id_cmc_senderNonce,
                     new OCTET_STRING(sn.getBytes()));
@@ -396,7 +398,7 @@
             if (fullEnrollmentReq != null) {
                 // format is PR_REQUEST_CMC
                 fullEnrollmentReq.encode(os);
-                ps.print(com.netscape.osutil.OSUtil.BtoA(os.toByteArray()));
+                ps.print(Utils.base64encode(os.toByteArray()));
                 ////fullEnrollmentReq.print(ps); // no header/trailer
             } 
 
--- a/pki/base/java-tools/src/com/netscape/cmstools/CRMFPopClient.java
+++ b/pki/base/java-tools/src/com/netscape/cmstools/CRMFPopClient.java
@@ -309,7 +309,7 @@
                 System.out.println("."); //key pair generated");
 
 		// wrap private key
-		byte transport[] = com.netscape.osutil.OSUtil.AtoB(transportCert);
+		byte transport[] = Utils.base64decode(transportCert);
 
 		X509Certificate tcert = manager.importCACertPackage(transport);
 
@@ -483,7 +483,7 @@
 		    s1.addElement(crmfMsg);
 		    byte encoded[] = ASN1Util.encode(s1); 
 
-		    String Req1 = com.netscape.osutil.OSUtil.BtoA(encoded);
+		    String Req1 = Utils.base64encode(encoded);
 
                     if(OUTPUT_CERT_REQ != null)
                     {
--- a/pki/base/java-tools/src/com/netscape/cmstools/DRMTool.java
+++ b/pki/base/java-tools/src/com/netscape/cmstools/DRMTool.java
@@ -36,6 +36,8 @@
 import org.mozilla.jss.util.Password;
 import org.mozilla.jss.*;
 
+import com.netscape.cmsutil.util.Utils;
+
 /**
  * The DRMTool class is a utility program designed to operate on an LDIF file
  * to perform one or more of the following tasks:
@@ -1596,7 +1598,7 @@
 
         // Decode the ASCII BASE 64 certificate enclosed in the
         // String() object into a BINARY BASE 64 byte[] object
-        decodedBASE64Cert = com.netscape.osutil.OSUtil.AtoB(
+        decodedBASE64Cert = Utils.base64decode(
                                 encodedBASE64Cert );
 
         // Create an X509CertImpl() object from
@@ -1938,13 +1940,13 @@
                                                  0 );
             if( mDebug ) {
                 log( "DEBUG: sk = '"
-                   + com.netscape.osutil.OSUtil.BtoA( sk.getEncoded() )
+                   + Utils.base64encode( sk.getEncoded() )
                    + "' length = '"
                    + sk.getEncoded().length
                    + "'"
                    + NEWLINE, false );
                 log( "DEBUG: pri = '"
-                   + com.netscape.osutil.OSUtil.BtoA( pri )
+                   + Utils.base64encode( pri )
                    + "' length = '"
                    + pri.length
                    + "'"
@@ -3814,7 +3816,7 @@
                         // enclosed in the String() object
                         // into a BINARY BASE 64 byte[] object
                         source_wrappedKeyData =
-                            com.netscape.osutil.OSUtil.AtoB( data );
+                            Utils.base64decode( data );
 
                         // rewrap the source wrapped private key data
                         target_wrappedKeyData = rewrap_wrapped_key_data(
@@ -3823,7 +3825,7 @@
                         // Encode the BINARY BASE 64 byte[] object
                         // into an ASCII BASE 64 certificate
                         // enclosed in a String() object
-                        revised_data = com.netscape.osutil.OSUtil.BtoA(
+                        revised_data = Utils.base64encode(
                                            target_wrappedKeyData );
 
                         // Unformat the ASCII BASE 64 certificate
@@ -3888,7 +3890,7 @@
                         // enclosed in the String() object
                         // into a BINARY BASE 64 byte[] object
                         source_wrappedKeyData =
-                            com.netscape.osutil.OSUtil.AtoB( data );
+                            Utils.base64decode( data );
 
                         // rewrap the source wrapped private key data
                         target_wrappedKeyData = rewrap_wrapped_key_data(
@@ -3897,7 +3899,7 @@
                         // Encode the BINARY BASE 64 byte[] object
                         // into an ASCII BASE 64 certificate
                         // enclosed in a String() object
-                        revised_data = com.netscape.osutil.OSUtil.BtoA(
+                        revised_data = Utils.base64encode(
                                            target_wrappedKeyData );
 
                         // Unformat the ASCII BASE 64 certificate
--- a/pki/base/java-tools/src/com/netscape/cmstools/ExtJoiner.java
+++ b/pki/base/java-tools/src/com/netscape/cmstools/ExtJoiner.java
@@ -81,7 +81,7 @@
             DerOutputStream out = new DerOutputStream();
 
             out.putSequence(exts);
-            System.out.println(com.netscape.osutil.OSUtil.BtoA(out.toByteArray()));
+            System.out.println(Utils.base64encode(out.toByteArray()));
         } catch (IOException e) {
             System.out.println(e.toString());
         }
@@ -97,6 +97,6 @@
         } finally {
             fis.close();
         }
-        return  com.netscape.osutil.OSUtil.AtoB(new String(data));
+        return  Utils.base64decode(new String(data));
     }
 }
--- a/pki/base/java-tools/src/com/netscape/cmstools/GenExtKeyUsage.java
+++ b/pki/base/java-tools/src/com/netscape/cmstools/GenExtKeyUsage.java
@@ -22,7 +22,7 @@
 import java.util.Vector;
 import netscape.security.x509.*;
 import netscape.security.util.*;
-
+import com.netscape.cmsutil.util.Utils;
 
 /**
  * Generates a DER-encoded Extended Key Usage extension.
@@ -89,7 +89,7 @@
 
             // BASE64 encode the whole thing and write it to stdout
 
-            System.out.println(com.netscape.osutil.OSUtil.BtoA(extdos.toByteArray()));
+            System.out.println(Utils.base64encode(extdos.toByteArray()));
 
         } catch (Exception e) {
             e.printStackTrace();
--- a/pki/base/java-tools/src/com/netscape/cmstools/GenIssuerAltNameExt.java
+++ b/pki/base/java-tools/src/com/netscape/cmstools/GenIssuerAltNameExt.java
@@ -22,7 +22,7 @@
 import java.net.*;
 import netscape.security.x509.*;
 import netscape.security.util.*;
-
+import com.netscape.cmsutil.util.Utils;
 
 /**
  * This program generates an issuer alternative name extension
@@ -82,7 +82,7 @@
         ext.encode(os);
 
         System.out.println(
-            com.netscape.osutil.OSUtil.BtoA(os.toByteArray())
+            Utils.base64encode(os.toByteArray())
         );
     }
 
--- a/pki/base/java-tools/src/com/netscape/cmstools/GenSubjectAltNameExt.java
+++ b/pki/base/java-tools/src/com/netscape/cmstools/GenSubjectAltNameExt.java
@@ -22,7 +22,7 @@
 import java.net.*;
 import netscape.security.x509.*;
 import netscape.security.util.*;
-
+import com.netscape.cmsutil.util.Utils;
 
 /**
  * This program generates an subject alternative name extension
@@ -82,7 +82,7 @@
         ext.encode(os);
 
         System.out.println(
-            com.netscape.osutil.OSUtil.BtoA(os.toByteArray())
+            Utils.base64encode(os.toByteArray())
         );
     }
 
--- a/pki/base/java-tools/src/com/netscape/cmstools/HttpClient.java
+++ b/pki/base/java-tools/src/com/netscape/cmstools/HttpClient.java
@@ -41,6 +41,8 @@
 import com.netscape.cmsutil.ocsp.Request;
 
 
+import com.netscape.cmsutil.util.Utils;
+
 /**
  * This class implements a CMC Enroll client for testing.
  *
@@ -219,7 +221,7 @@
 
         ByteArrayOutputStream bs = new ByteArrayOutputStream();
         PrintStream ps = new PrintStream(bs);
-        ps.print(com.netscape.osutil.OSUtil.BtoA(bout));
+        ps.print(Utils.base64encode(bout));
         System.out.println(bs.toString());
 
         System.out.println("");
--- a/pki/base/java-tools/src/com/netscape/cmstools/OCSPClient.java
+++ b/pki/base/java-tools/src/com/netscape/cmstools/OCSPClient.java
@@ -38,7 +38,7 @@
 
 import com.netscape.cmsutil.ocsp.*;
 import com.netscape.cmsutil.ocsp.Request;
-
+import com.netscape.cmsutil.util.Utils;
 
 /**
  * This class implements a OCSP client for testing.
@@ -119,7 +119,7 @@
         dos.flush();
 
         System.out.println("Data Length: " + request_data.length);
-        System.out.println("Data: " + com.netscape.osutil.OSUtil.BtoA(request_data));
+        System.out.println("Data: " + Utils.base64encode(request_data));
 
         InputStream iiss = socket.getInputStream(); 
         FileOutputStream fof = new FileOutputStream(output);
--- a/pki/base/java-tools/src/com/netscape/cmstools/PKCS10Client.java
+++ b/pki/base/java-tools/src/com/netscape/cmstools/PKCS10Client.java
@@ -165,7 +165,7 @@
             certRequest.encode(bos);
             byte[] bb = bos.toByteArray();
 
-            String b64E = com.netscape.osutil.OSUtil.BtoA(bb);
+            String b64E = Utils.base64encode(bb);
  
             System.out.println("");
             System.out.println(b64E);
--- a/pki/base/java-tools/src/com/netscape/cmstools/PasswordCache.java
+++ b/pki/base/java-tools/src/com/netscape/cmstools/PasswordCache.java
@@ -31,6 +31,8 @@
 import org.mozilla.jss.SecretDecoderRing.Decryptor;
 import org.mozilla.jss.util.Base64OutputStream;
 
+import com.netscape.cmsutil.util.Utils;
+
 /**
  * Tool for interacting with the PWcache 
  * 
@@ -108,7 +110,7 @@
     }
 
     public static byte[] base64Decode(String s) throws IOException {
-         byte[] d = com.netscape.osutil.OSUtil.AtoB(s);
+         byte[] d = Utils.base64decode(s);
          return d;
     }
 
--- a/pki/base/java-tools/src/com/netscape/cmstools/PrettyPrintCert.java
+++ b/pki/base/java-tools/src/com/netscape/cmstools/PrettyPrintCert.java
@@ -24,7 +24,7 @@
 import java.security.cert.*;
 import netscape.security.x509.*;
 import netscape.security.util.*;
-
+import com.netscape.cmsutil.util.Utils;
 
 /**
  * The PrettyPrintCert class is a utility program designed to "pretty print"
@@ -162,7 +162,7 @@
         // (5) Decode the ASCII BASE 64 certificate enclosed in the
         //     String() object into a BINARY BASE 64 byte[] object
 
-        decodedBASE64Cert = com.netscape.osutil.OSUtil.AtoB(encodedBASE64Cert);
+        decodedBASE64Cert = Utils.base64decode(encodedBASE64Cert);
 
         // (6) Create an X509CertImpl() object from the BINARY BASE 64
         //     byte[] object
--- a/pki/base/java-tools/src/com/netscape/cmstools/PrettyPrintCrl.java
+++ b/pki/base/java-tools/src/com/netscape/cmstools/PrettyPrintCrl.java
@@ -24,7 +24,7 @@
 import java.security.cert.*;
 import netscape.security.x509.*;
 import netscape.security.util.*;
-
+import com.netscape.cmsutil.util.Utils;
 
 /**
  * The PrettyPrintCrl class is a utility program designed to "pretty print"
@@ -142,7 +142,7 @@
         // (5) Decode the ASCII BASE 64 CRL enclosed in the
         //     String() object into a BINARY BASE 64 byte[] object
 
-        decodedBASE64Crl = com.netscape.osutil.OSUtil.AtoB(encodedBASE64Crl);
+        decodedBASE64Crl = Utils.base64decode(encodedBASE64Crl);
 
         // (6) Create an X509CRLImpl() object from the BINARY BASE 64
         //     byte[] object
--- a/pki/base/kra/src/com/netscape/kra/EnrollmentService.java
+++ b/pki/base/kra/src/com/netscape/kra/EnrollmentService.java
@@ -55,7 +55,7 @@
 import com.netscape.certsrv.request.*;
 import com.netscape.certsrv.authentication.*;
 import com.netscape.certsrv.apps.CMS;
-
+import com.netscape.cmsutil.util.Utils;
 
 /**
  * A class represents archival request processor. It 
@@ -563,7 +563,7 @@
             CMS.debug("EnrollmentService::getPKIArchiveOptions> crmfBlob=" + crmfBlob);
         byte[] crmfBerBlob = null;
 
-        crmfBerBlob = com.netscape.osutil.OSUtil.AtoB(crmfBlob);
+        crmfBerBlob = Utils.base64decode(crmfBlob);
         ByteArrayInputStream crmfBerBlobIn = new 	
             ByteArrayInputStream(crmfBerBlob);
         SEQUENCE crmfmsgs = null;
--- a/pki/base/kra/src/com/netscape/kra/StorageKeyUnit.java
+++ b/pki/base/kra/src/com/netscape/kra/StorageKeyUnit.java
@@ -44,7 +44,7 @@
 import org.mozilla.jss.util.Password;
 import org.mozilla.jss.crypto.*;
 import com.netscape.cmscore.cert.*;
-
+import com.netscape.cmsutil.util.Utils;
 
 /**
  * A class represents a storage key unit. Currently, this
@@ -716,9 +716,7 @@
             byte prev[] = preVerify(share);
             byte enc[] = cipher.doFinal(prev);
 
-            // #615387 - cannot use CMS.BtoA because CMS is not present during
-            // configuration
-            return com.netscape.osutil.OSUtil.BtoA(enc).trim();
+            return Utils.base64encode(enc).trim();
         } catch (NoSuchAlgorithmException e) {
             throw new EBaseException(CMS.getUserMessage("CMS_BASE_INVALID_KEY_1", 
                         e.toString()));
--- a/pki/base/util/src/com/netscape/cmsutil/crypto/CryptoUtil.java
+++ b/pki/base/util/src/com/netscape/cmsutil/crypto/CryptoUtil.java
@@ -55,8 +55,7 @@
 import netscape.security.pkcs.*;
 import netscape.security.x509.*;
 import com.netscape.cmsutil.util.Cert;
-
-import com.netscape.osutil.OSUtil;
+import com.netscape.cmsutil.util.Utils;
 
 public class CryptoUtil {
 
@@ -75,7 +74,7 @@
             return
                     "-----BEGIN CERTIFICATE-----\n"
                 //  + mEncoder.encodeBuffer(cert.getEncoded())
-                    + OSUtil.BtoA( cert.getEncoded() )
+                    + Utils.base64encode( cert.getEncoded() )
                     + "-----END CERTIFICATE-----\n";
         } catch (Exception e) {}
         return null;
@@ -262,7 +261,7 @@
     public static byte[] base64Decode(String s) throws IOException {
      // BASE64Decoder base64 = new BASE64Decoder();
      // byte[] d = base64.decodeBuffer(s);
-        byte[] d = OSUtil.AtoB( s );
+        byte[] d = Utils.base64decode( s );
                                                                                 
         return d;
     }
--- a/pki/base/util/src/com/netscape/cmsutil/util/Utils.java
+++ b/pki/base/util/src/com/netscape/cmsutil/util/Utils.java
@@ -28,9 +28,13 @@
 	 * Checks if this is NT.
 	 */
 	public static boolean isNT() {
-		return ((File.separator).equals("\\"));
+		return File.separator.equals("\\");
 	}
 
+        public static boolean isUnix() {
+        return File.separator.equals("/");
+        }
+
 	public static boolean exec(String cmd) {
 		try {
 			String cmds[] = null;
@@ -241,11 +245,20 @@
      * there'll be trouble if the Vector contains something other
      * than just Strings
      */
-    public static String[] getStringArrayFromVector(Vector v) {
+    public static String[] getStringArrayFromVector(Vector<String> v) {
         String s[] = new String[v.size()];
 
         v.copyInto(s);
         return s;
     }
 
+    public static String base64encode(byte[] bytes) {
+        String string = com.netscape.osutil.OSUtil.BtoA(bytes);
+        return string;
+    }
+
+    public static byte[] base64decode(String string) {
+        byte[] bytes = com.netscape.osutil.OSUtil.AtoB(string);
+        return bytes;
+    }
 }
--- a/pki/base/util/src/netscape/security/extensions/AuthInfoAccessExtension.java
+++ b/pki/base/util/src/netscape/security/extensions/AuthInfoAccessExtension.java
@@ -29,6 +29,7 @@
 import netscape.security.x509.*;
 import netscape.security.util.*;
 
+import com.netscape.cmsutil.util.Utils;
 
 /**
  * This represents the authority information access extension
@@ -237,7 +238,7 @@
         try {
             aia.encode(os);
 
-            System.out.println(com.netscape.osutil.OSUtil.BtoA(os.toByteArray()));
+            System.out.println(Utils.base64encode(os.toByteArray()));
         } catch (IOException e) {
             System.out.println(e.toString());
         }
--- a/pki/base/util/src/netscape/security/extensions/SubjectInfoAccessExtension.java
+++ b/pki/base/util/src/netscape/security/extensions/SubjectInfoAccessExtension.java
@@ -28,7 +28,7 @@
 import java.security.cert.CertificateException;
 import netscape.security.x509.*;
 import netscape.security.util.*;
-
+import com.netscape.cmsutil.util.Utils;
 
 /**
  * This represents the subject information access extension
@@ -218,7 +218,7 @@
         try {
             aia.encode(os);
 
-            System.out.println(com.netscape.osutil.OSUtil.BtoA(os.toByteArray()));
+            System.out.println(Utils.base64encode(os.toByteArray()));
         } catch (IOException e) {
             System.out.println(e.toString());
         }
--- a/pki/base/util/src/netscape/security/pkcs/PKCS10.java
+++ b/pki/base/util/src/netscape/security/pkcs/PKCS10.java
@@ -27,6 +27,7 @@
 import java.security.SignatureException;
 import java.security.PublicKey;
 
+import com.netscape.cmsutil.util.Utils;
 
 import netscape.security.util.*;	// DER
 import netscape.security.x509.AlgorithmId;
@@ -325,7 +326,7 @@
 	
 
 	out.println ("-----BEGIN NEW CERTIFICATE REQUEST-----");
-	out.println (com.netscape.osutil.OSUtil.BtoA(certificateRequest));
+	out.println (Utils.base64encode(certificateRequest));
 	out.println ("-----END NEW CERTIFICATE REQUEST-----");
     }
 
--- a/pki/base/util/src/netscape/security/x509/CertificatePoliciesExtension.java
+++ b/pki/base/util/src/netscape/security/x509/CertificatePoliciesExtension.java
@@ -27,7 +27,9 @@
 import java.security.cert.CertificateNotYetValidException;
 import java.util.*;
 import netscape.security.util.*;
- 
+
+import com.netscape.cmsutil.util.Utils;
+
 /**
  * This class defines the Certificate Policies Extension.
  * 
@@ -316,7 +318,7 @@
 				new CertificatePoliciesExtension(infos);
 
 	              // BASE64 encode the whole thing and write it to stdout
-	              System.out.println( com.netscape.osutil.OSUtil.BtoA(ext.getExtensionValue()) );
+	              System.out.println(Utils.base64encode(ext.getExtensionValue()));
 		} catch (IOException e) {
 			System.out.println(e.toString());
 		}
--- a/pki/base/silent/src/ca/ConfigureCA.java
+++ b/pki/base/silent/src/ca/ConfigureCA.java
@@ -45,7 +45,6 @@
 import com.netscape.cmsutil.ocsp.*;
 import com.netscape.cmsutil.ocsp.Request;
 
-import com.netscape.osutil.OSUtil;
 
 
 public class ConfigureCA {
@@ -1061,7 +1060,7 @@
                 // Convert a byte array to base64 string
                 // cert_to_import = new sun.misc.BASE64Encoder().encode(
                 //     hr.getResponseData());
-                cert_to_import = OSUtil.BtoA(hr.getResponseData());
+                cert_to_import = Utils.base64encode(hr.getResponseData());
 
                 // Convert base64 string to a byte array
                 // buf = new sun.misc.BASE64Decoder().decodeBuffer(s);
--- a/pki/base/silent/src/common/ComCrypto.java
+++ b/pki/base/silent/src/common/ComCrypto.java
@@ -57,8 +57,7 @@
 //import sun.misc.BASE64Encoder;
 //import sun.misc.BASE64Decoder;
 import java.security.Signature;
-import com.netscape.osutil.OSUtil;
-
+import com.netscape.cmsutil.util.Utils;
 
 /**
  * CMS Test framework .
@@ -599,7 +598,7 @@
 
             // BASE64Encoder encoder = new BASE64Encoder(); 
             // String Req1 = encoder.encodeBuffer(encoded);
-            String Req1 = OSUtil.BtoA(encoded);
+            String Req1 = Utils.base64encode(encoded);
 
             // Set CRMF_REQUEST variable 
             CRMF_REQUEST = Req1;
@@ -677,7 +676,7 @@
             // wrap private key
             // BASE64Decoder decoder = new BASE64Decoder();
             // byte transport[] = decoder.decodeBuffer(transportcert);
-            byte transport[] = OSUtil.AtoB(transportcert);
+            byte transport[] = Utils.base64decode(transportcert);
 
             X509Certificate tcert = manager.importCACertPackage(transport);
 
@@ -765,7 +764,7 @@
             // BASE64Encoder encoder = new BASE64Encoder();
 
             // CRMF_REQUEST = encoder.encodeBuffer(encoded);
-            CRMF_REQUEST = OSUtil.BtoA(encoded);
+            CRMF_REQUEST = Utils.base64encode(encoded);
 
             System.out.println("Generated crmf request: ...... ");
             System.out.println("");
--- a/pki/base/silent/src/common/PostQuery.java
+++ b/pki/base/silent/src/common/PostQuery.java
@@ -19,8 +19,7 @@
 import java.net.*;
 import java.io.*;
 import java.util.*;
-
-import com.netscape.osutil.OSUtil;
+import com.netscape.cmsutil.util.Utils;
 
 /**
  * CMS Test framework .
@@ -84,7 +83,7 @@
             System.out.println("adminpwd=" + adminPWD);
             // String encoding = new sun.misc.BASE64Encoder().encode(
             //         userPassword.getBytes());
-            String encoding = OSUtil.BtoA(
+            String encoding = Utils.base64encode(
                     userPassword.getBytes());
             HttpURLConnection URLCon = (HttpURLConnection) myUrl.openConnection();
 
--- a/pki/base/silent/src/common/Utilities.java
+++ b/pki/base/silent/src/common/Utilities.java
@@ -25,8 +25,7 @@
 import sun.misc.*;
 import netscape.security.x509.*;
 import netscape.security.util.*;
-
-import com.netscape.osutil.OSUtil;
+import com.netscape.cmsutil.util.Utils;
 
 public class Utilities {
     private static final String keyValueSeparators = "=: \t\r\n\f";
@@ -306,7 +305,7 @@
         try {
             // BASE64Decoder base64 = new BASE64Decoder();
             // byte decodedBASE64Cert[] = base64.decodeBuffer(temp);
-            byte decodedBASE64Cert[] = OSUtil.AtoB(temp);
+            byte decodedBASE64Cert[] = Utils.base64decode(temp);
             X509CertImpl x509_cert = new X509CertImpl(decodedBASE64Cert);
             X509CertInfo certinfo = (X509CertInfo) x509_cert.get("x509.INFO");
 
--- a/pki/base/silent/src/drm/ConfigureDRM.java
+++ b/pki/base/silent/src/drm/ConfigureDRM.java
@@ -41,8 +41,7 @@
 import netscape.security.x509.X509CertImpl;
 import netscape.security.x509.X509Key;
 import netscape.security.x509.X500Name;
-
-import com.netscape.osutil.OSUtil;
+import com.netscape.cmsutil.util.Utils;
 
 public class ConfigureDRM
 {
@@ -833,7 +832,7 @@
         // String cert_to_import = 
         //     new sun.misc.BASE64Encoder().encode(hr.getResponseData());
         String cert_to_import = 
-            OSUtil.BtoA(hr.getResponseData());
+            Utils.base64encode(hr.getResponseData());
         System.out.println("Imported Cert=" + cert_to_import);
 
         ComCrypto cCrypt = new ComCrypto(client_certdb_dir,
--- a/pki/base/silent/src/http/HTTPClient.java
+++ b/pki/base/silent/src/http/HTTPClient.java
@@ -24,8 +24,7 @@
 
 //import sun.misc.BASE64Encoder;
 //import sun.misc.BASE64Decoder;
-import com.netscape.osutil.OSUtil;
-
+import com.netscape.cmsutil.util.Utils;
 
 import org.mozilla.jss.*;
 import org.mozilla.jss.CryptoManager;
@@ -1327,7 +1326,7 @@
 
 			// String temp = encoder.encodeBuffer((user_id + 
 			// 			":" + user_password).getBytes());
-			String temp = OSUtil.BtoA((user_id + 
+			String temp = Utils.base64encode((user_id + 
 			 			":" + user_password).getBytes());
 
 			// note: temp already contains \r and \n. 
--- a/pki/base/silent/src/ocsp/ConfigureOCSP.java
+++ b/pki/base/silent/src/ocsp/ConfigureOCSP.java
@@ -41,8 +41,7 @@
 import netscape.security.x509.X509CertImpl;
 import netscape.security.x509.X509Key;
 import netscape.security.x509.X500Name;
-
-import com.netscape.osutil.OSUtil;
+import com.netscape.cmsutil.util.Utils;
 
 public class ConfigureOCSP
 {
@@ -736,7 +735,7 @@
         // String cert_to_import = 
         //         new sun.misc.BASE64Encoder().encode(hr.getResponseData());
         String cert_to_import = 
-                OSUtil.BtoA(hr.getResponseData());
+                Utils.base64encode(hr.getResponseData());
         System.out.println("Imported Cert=" + cert_to_import);
 
         ComCrypto cCrypt = new ComCrypto(client_certdb_dir,
--- a/pki/base/silent/src/ra/ConfigureRA.java
+++ b/pki/base/silent/src/ra/ConfigureRA.java
@@ -41,8 +41,7 @@
 import netscape.security.x509.X509CertImpl;
 import netscape.security.x509.X509Key;
 import netscape.security.x509.X500Name;
-
-import com.netscape.osutil.OSUtil;
+import com.netscape.cmsutil.util.Utils;
 
 public class ConfigureRA
 {
@@ -585,7 +584,7 @@
 			// cert_to_import = 
 			//     new sun.misc.BASE64Encoder().encode(hr.getResponseData());
 			cert_to_import = 
-				OSUtil.BtoA(hr.getResponseData());
+				Utils.base64encode(hr.getResponseData());
 
 		}
 		catch (Exception e)
--- a/pki/base/silent/src/subca/ConfigureSubCA.java
+++ b/pki/base/silent/src/subca/ConfigureSubCA.java
@@ -42,8 +42,6 @@
 import com.netscape.cmsutil.ocsp.*;
 import com.netscape.cmsutil.ocsp.Request;
 
-import com.netscape.osutil.OSUtil;
-
 public class ConfigureSubCA
 {
 
@@ -777,7 +775,7 @@
         // String cert_to_import = 
         //         new sun.misc.BASE64Encoder().encode(hr.getResponseData());
         String cert_to_import = 
-                OSUtil.BtoA(hr.getResponseData());
+                Utils.base64encode(hr.getResponseData());
         System.out.println("Imported Cert=" + cert_to_import);
 
         ComCrypto cCrypt = new ComCrypto(client_certdb_dir,
--- a/pki/base/silent/src/tks/ConfigureTKS.java
+++ b/pki/base/silent/src/tks/ConfigureTKS.java
@@ -41,8 +41,7 @@
 import netscape.security.x509.X509CertImpl;
 import netscape.security.x509.X509Key;
 import netscape.security.x509.X500Name;
-
-import com.netscape.osutil.OSUtil;
+import com.netscape.cmsutil.util.Utils;
 
 public class ConfigureTKS
 {
@@ -704,7 +703,7 @@
         // String cert_to_import = 
         //         new sun.misc.BASE64Encoder().encode(hr.getResponseData());
         String cert_to_import = 
-                OSUtil.BtoA(hr.getResponseData());
+                Utils.base64encode(hr.getResponseData());
         System.out.println("Imported Cert=" + cert_to_import);
 
         ComCrypto cCrypt = new ComCrypto(client_certdb_dir,
--- a/pki/base/silent/src/tps/ConfigureTPS.java
+++ b/pki/base/silent/src/tps/ConfigureTPS.java
@@ -41,8 +41,7 @@
 import netscape.security.x509.X509CertImpl;
 import netscape.security.x509.X509Key;
 import netscape.security.x509.X500Name;
-
-import com.netscape.osutil.OSUtil;
+import com.netscape.cmsutil.util.Utils;
 
 public class ConfigureTPS
 {
@@ -718,7 +717,7 @@
 			// cert_to_import = 
 			//     new sun.misc.BASE64Encoder().encode(hr.getResponseData());
 			cert_to_import = 
-				OSUtil.BtoA(hr.getResponseData());
+				Utils.base64encode(hr.getResponseData());
 
 		}
 		catch (Exception e)
diff --git a/pki/base/util/src/com/netscape/cmsutil/util/Cert.java b/pki/base/util/src/com/netscape/cmsutil/util/Cert.java
index 6a2d32b..589186d 100644
--- a/pki/base/util/src/com/netscape/cmsutil/util/Cert.java
+++ b/pki/base/util/src/com/netscape/cmsutil/util/Cert.java
@@ -23,7 +23,6 @@ import netscape.security.x509.X509CRLImpl;
 import netscape.security.x509.X509CertImpl;
 import org.mozilla.jss.crypto.SignatureAlgorithm;
 //import sun.misc.BASE64Decoder;
-import com.netscape.osutil.OSUtil;
 
 import java.io.IOException;
 import java.security.cert.CertificateException;
@@ -96,7 +95,7 @@ public class Cert {
         mime64 = stripCertBrackets(mime64.trim());
         String newval = normalizeCertStr(mime64);
      // byte rawPub[] = mDecoder.decodeBuffer(newval);
-        byte rawPub[] = OSUtil.AtoB( newval );
+        byte rawPub[] = Utils.base64decode( newval );
         X509CertImpl cert = null;
 
         try {
@@ -111,7 +110,7 @@ public class Cert {
         mime64 = stripCertBrackets(mime64.trim());
         String newval = normalizeCertStr(mime64);
      // byte rawPub[] = mDecoder.decodeBuffer(newval);
-        byte rawPub[] = OSUtil.AtoB( newval );
+        byte rawPub[] = Utils.base64decode( newval );
         PKCS7 p7 = null;
 
         try {
@@ -127,7 +126,7 @@ public class Cert {
         mime64 = stripCRLBrackets(mime64.trim());
         String newval = normalizeCertStr(mime64);
      // byte rawPub[] = mDecoder.decodeBuffer(newval);
-        byte rawPub[] = OSUtil.AtoB( newval );
+        byte rawPub[] = Utils.base64decode( newval );
         X509CRL crl = null;
 
         try {
@@ -141,7 +140,7 @@ public class Cert {
         throws IOException {
         mime64 = stripCRLBrackets(mime64.trim());
 
-        byte rawPub[] = OSUtil.AtoB(mime64);
+        byte rawPub[] = Utils.base64decode(mime64);
         X509CRL crl = null;
 
         try {
