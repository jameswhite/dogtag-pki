commit 3a2cd2158ff31667432867181618d845267353a7
Author: Endi Sukma Dewata <edewata@redhat.com>
Date:   Wed Feb 15 15:01:42 2012 -0600

    Removed OS subsystem.
    
    The OS subsystem was previously used to get the PID and to handle
    shutdown signals using the OSUtil. It has been removed because the
    functionalities can be obtained without using native code. The PID
    will now be read from an external PID file created by the wrapper
    script. The shutdown signals will now be handled by shutdown hook.
    
    Ticket #90

--- a/pki/base/ca/shared/conf/CS.cfg.in
+++ b/pki/base/ca/shared/conf/CS.cfg.in
@@ -40,6 +40,7 @@
 instanceRoot=[PKI_INSTANCE_PATH]
 machineName=[PKI_MACHINE_NAME]
 instanceId=[PKI_INSTANCE_ID]
+pidDir=[PKI_PIDDIR]
 service.machineName=[PKI_MACHINE_NAME]
 service.instanceDir=[PKI_INSTANCE_ROOT]
 service.securePort=[PKI_AGENT_SECURE_PORT]
--- a/pki/base/common/src/CMakeLists.txt
+++ b/pki/base/common/src/CMakeLists.txt
@@ -847,7 +847,6 @@
     com/netscape/cmscore/util/ExceptionFormatter.java
     com/netscape/cmscore/util/StatsSubsystem.java
     com/netscape/cmscore/util/FileDialogFilter.java
-    com/netscape/cmscore/util/OsSubsystem.java
     com/netscape/cmscore/util/Debug.java
     com/netscape/cmscore/util/UtilResources.java
     com/netscape/cmscore/policy/JavaScriptRequestProxy.java
--- a/pki/base/common/src/com/netscape/certsrv/apps/CMS.java
+++ b/pki/base/common/src/com/netscape/certsrv/apps/CMS.java
@@ -309,8 +309,8 @@
      *
      * @return process id of the server
      */
-    public static int getpid() {
-        return _engine.getpid();
+    public static int getPID() {
+        return _engine.getPID();
     }
 
     /**
--- a/pki/base/common/src/com/netscape/certsrv/apps/ICMSEngine.java
+++ b/pki/base/common/src/com/netscape/certsrv/apps/ICMSEngine.java
@@ -92,7 +92,7 @@
      *
      * @return process id of the server
      */
-    public int getpid();
+    public int getPID();
 
     public void reinit(String id) throws EBaseException;
     public int getCSState();
--- a/pki/base/common/src/com/netscape/cms/logging/LogFile.java
+++ b/pki/base/common/src/com/netscape/cms/logging/LogFile.java
@@ -148,11 +148,6 @@
     private Thread mFlushThread = null;
 
     /**
-     * The current pid for the log entries
-     */
-    protected int mPid = CMS.getpid();
-
-    /**
      * The selected log event types
      */
     protected String mSelectedEventsList = null;
@@ -1068,12 +1063,12 @@
         // This should follow the Common Log Format which still needs
         // some work.
         if (ev.getMultiline() == ILogger.L_MULTILINE) {
-            entry = mPid + "." + Thread.currentThread().getName() + " - ["
+            entry = CMS.getPID() + "." + Thread.currentThread().getName() + " - ["
                     + mLogDateFormat.format(mDate) + "] [" +
                     Integer.toString(ev.getSource()) + "] [" + Integer.toString(ev.getLevel())
                     + "] " + prepareMultiline(ev.toString());
         } else {
-            entry = mPid + "." + Thread.currentThread().getName() + " - ["
+            entry = CMS.getPID() + "." + Thread.currentThread().getName() + " - ["
                     + mLogDateFormat.format(mDate) + "] [" +
                     Integer.toString(ev.getSource()) + "] [" + Integer.toString(ev.getLevel())
                     + "] " + ev.toString();
--- a/pki/base/common/src/com/netscape/cmscore/apps/CMSEngine.java
+++ b/pki/base/common/src/com/netscape/cmscore/apps/CMSEngine.java
@@ -84,7 +84,6 @@
 import com.netscape.cmscore.logging.LogSubsystem;
 import com.netscape.cmscore.logging.Logger;
 import com.netscape.cmscore.logging.SignedAuditLogger;
-import com.netscape.cmscore.util.OsSubsystem;
 import com.netscape.cmscore.security.JssSubsystem;
 import com.netscape.cmscore.dbs.DBSubsystem;
 import com.netscape.cmscore.dbs.*;
@@ -117,8 +116,10 @@
 
     public static final SubsystemRegistry mSSReg = SubsystemRegistry.getInstance();
 
-    public static String instanceDir;    /* path to instance <server-root>/cert-<instance-name> */
-  
+    public String instanceDir; /* path to instance <server-root>/cert-<instance-name> */
+    private String instanceId;
+    private int pid;
+
     private IConfigStore mConfig = null; 
     private ISubsystem mOwner = null; 
     private long mStartupTime = 0;
@@ -139,8 +140,6 @@
             new SubsystemInfo(LogSubsystem.ID, 
                 LogSubsystem.getInstance()),
             new SubsystemInfo( 
-                OsSubsystem.ID, OsSubsystem.getInstance()),
-            new SubsystemInfo( 
                 JssSubsystem.ID, JssSubsystem.getInstance()),
             new SubsystemInfo( 
                 DBSubsystem.ID, DBSubsystem.getInstance()),
@@ -191,6 +190,22 @@
      * private constructor.
      */
     public CMSEngine() {
+
+        // Shutdown on SIGINT, SIGTERM, or SIGHUP.
+        Runtime.getRuntime().addShutdownHook(new Thread() {
+            public void run() {
+                /*LogDoc
+                *
+                * @phase watchdog check
+                */
+                getLogger().log(ILogger.EV_SYSTEM,
+                        ILogger.S_OTHER,
+                        ILogger.LL_INFO,
+                        "OS: Received shutdown signal");
+
+                shutdown();
+            };
+        });
     }
 
     /**
@@ -293,6 +308,7 @@
         }
 
         instanceDir = config.getString("instanceRoot");
+        instanceId = config.getString("instanceId");
 
         loadDynSubsystems();
 
@@ -896,7 +912,6 @@
      * @exception EBaseException if any subsystem fails to startup.
      */
     public void startup() throws EBaseException {
-        //OsSubsystem.nativeExit(0);
         startupSubsystems(mStaticSubsystems);
         if (mDynSubsystems != null)
             startupSubsystems(mDynSubsystems);
@@ -1486,7 +1501,7 @@
         return (File.separator.equals("\\"));
     }
 
-    private static void shutdownHttpServer() {
+    private void shutdownHttpServer() {
 
         try {
             String cmds[] = null;
@@ -1641,8 +1656,31 @@
         return new PWCBsdr();
     }
 
-    public int getpid() {
-        return OsSubsystem.getpid();
+    public int getPID() {
+        if (pid != 0) return pid;
+
+        BufferedReader bf = null;
+        try {
+            // PID file is be created by wrapper script (e.g. /usr/sbin/tomcat6)
+            String dir = mConfig.getString("pidDir");
+            String name = dir+File.separator+instanceId+".pid";
+
+            if (dir == null) return pid;
+            File file = new File(name);
+            if (!file.exists()) return pid;
+
+            bf = new BufferedReader(new FileReader(file));
+            String value = bf.readLine();
+            pid = Integer.parseInt(value);
+
+        } catch (Exception e) {
+            e.printStackTrace();
+
+        } finally {
+            if (bf != null) try { bf.close(); } catch (Exception e) { e.printStackTrace(); }
+        }
+
+        return pid;
     }
 
     public Date getCurrentDate() {
--- a/pki/base/common/src/com/netscape/cmscore/apps/Upgrade.java
+++ b/pki/base/common/src/com/netscape/cmscore/apps/Upgrade.java
@@ -28,7 +28,7 @@
 import org.mozilla.jss.util.ConsolePasswordCallback;
 import java.io.File;
 import java.lang.*;
-
+import com.netscape.cmsutil.util.Utils;
 
 public final class Upgrade {
     public static void perform422to45(IConfigStore c)
@@ -130,7 +130,7 @@
         c.putString("log.instance.System.type", 
             "system");
 
-        if (!OsSubsystem.isUnix()) {
+        if (Utils.isNT()) {
             c.putString("log.impl.NTEventLog.class",
                 "com.netscape.certsrv.logging.NTEventLog");
 
--- a/pki/base/common/test/com/netscape/certsrv/app/CMSEngineDefaultStub.java
+++ b/pki/base/common/test/com/netscape/certsrv/app/CMSEngineDefaultStub.java
@@ -66,7 +66,7 @@
         return null;
     }
 
-    public int getpid() {
+    public int getPID() {
         return 0;
     }
 
--- a/pki/base/kra/shared/conf/CS.cfg.in
+++ b/pki/base/kra/shared/conf/CS.cfg.in
@@ -31,6 +31,7 @@
 instanceRoot=[PKI_INSTANCE_PATH]
 machineName=[PKI_MACHINE_NAME]
 instanceId=[PKI_INSTANCE_ID]
+pidDir=[PKI_PIDDIR]
 service.machineName=[PKI_MACHINE_NAME]
 service.instanceDir=[PKI_INSTANCE_ROOT]
 service.securePort=[PKI_AGENT_SECURE_PORT]
--- a/pki/base/ocsp/shared/conf/CS.cfg.in
+++ b/pki/base/ocsp/shared/conf/CS.cfg.in
@@ -1,6 +1,7 @@
 _000=##
 _001=## Online Certificate Status Protocol (OCSP) Responder Configuration File
 _002=##
+pidDir=[PKI_PIDDIR]
 pkicreate.pki_instance_root=[PKI_INSTANCE_ROOT]
 pkicreate.pki_instance_name=[PKI_INSTANCE_ID]
 pkicreate.subsystem_type=[PKI_SUBSYSTEM_TYPE]
--- a/pki/base/ra/doc/CS.cfg.in
+++ b/pki/base/ra/doc/CS.cfg.in
@@ -1,6 +1,7 @@
 _000=##
 _001=## Registration Authority (RA) Configuration File
 _002=##
+pidDir=[PKI_PIDDIR]
 pkicreate.pki_instance_root=[PKI_INSTANCE_ROOT]
 pkicreate.pki_instance_name=[PKI_INSTANCE_ID]
 pkicreate.subsystem_type=[PKI_SUBSYSTEM_TYPE]
--- a/pki/base/setup/pkicreate
+++ b/pki/base/setup/pkicreate
@@ -426,7 +426,7 @@
 my $webapps_instance_path           = undef;  # CA, KRA, OCSP, TKS
 my $webapps_subsystem_instance_path = undef;  # CA, KRA, OCSP, TKS
 my $work_instance_path              = undef;  # CA, KRA, OCSP, TKS (Tomcat)
-my $pki_piddir_path                 = undef;  # RA, TPS
+my $pki_piddir_path                 = undef;  # CA, KRA, OCSP, TKS, RA, TPS
 my $pki_lockdir_path                = undef;  # RA, TPS
 
 # Base instance symbolic link paths
@@ -1603,6 +1603,9 @@
     $pki_cfg_subsystem_file_path      = $conf_subsystem_path
                                       . "/" . $pki_cfg_base_name;
 
+    $pki_piddir_path                  = $default_apache_pids_path
+                                      . "/" . $subsystem_type;
+
     ## Initialize subdirectory paths (CA subsystems)
     if ($subsystem_type eq $CA) {
         $profile_select_template_subsystem_file_path = $ui_subsystem_path 
@@ -1691,8 +1694,6 @@
                                                    . $schemaMods_ldif_base_name;
         }
 
-        $pki_piddir_path                        = $default_apache_pids_path
-                                                . "/" . $subsystem_type;
         $pki_lockdir_path                       = $default_lockdir
                                                 . "/" . $subsystem_type;
         $pki_apache_initscript_file_path        = $pki_subsystem_common_area
@@ -2342,6 +2343,7 @@
     $slot_hash{$PKI_REGISTRY_FILE_SLOT}    = $pki_registry_instance_file_path;
     $slot_hash{$PKI_USER_SLOT}             = $pki_user;
     $slot_hash{$PKI_GROUP_SLOT}            = $pki_group;
+    $slot_hash{$PKI_PIDDIR}                = $pki_piddir_path;
 
     if ($subsystem_type eq $TPS) {
         $slot_hash{$REQUIRE_CFG_PL}        = "require \"${cgi_sow_instance_cfg_pl_path}\";";
@@ -2366,7 +2368,6 @@
         $slot_hash{$TPS_DIR}               = $pki_subsystem_path;
         $slot_hash{$PKI_FLAVOR_SLOT}       = $pki_flavor;
         $slot_hash{$PKI_RANDOM_NUMBER_SLOT} = $random;
-        $slot_hash{$PKI_PIDDIR}            = $pki_piddir_path;
         $slot_hash{$PKI_LOCKDIR}           = $pki_lockdir_path;
         if (is_Fedora() || (is_RHEL() && (! is_RHEL4()))) {
             $slot_hash{$FORTITUDE_APACHE}  = "Apache2";
--- a/pki/base/tks/shared/conf/CS.cfg.in
+++ b/pki/base/tks/shared/conf/CS.cfg.in
@@ -1,6 +1,7 @@
 _000=##
 _001=## Token Key Service (TKS) Configuration File
 _002=##
+pidDir=[PKI_PIDDIR]
 pkicreate.pki_instance_root=[PKI_INSTANCE_ROOT]
 pkicreate.pki_instance_name=[PKI_INSTANCE_ID]
 pkicreate.subsystem_type=[PKI_SUBSYSTEM_TYPE]
--- a/pki/base/tps/doc/CS.cfg.in
+++ b/pki/base/tps/doc/CS.cfg.in
@@ -1,6 +1,7 @@
 _000=##
 _001=## Token Processing System (TPS) Configuration File
 _002=##
+pidDir=[PKI_PIDDIR]
 pkicreate.pki_instance_root=[PKI_INSTANCE_ROOT]
 pkicreate.pki_instance_name=[PKI_INSTANCE_ID]
 pkicreate.subsystem_type=[PKI_SUBSYSTEM_TYPE]
--- a/pki/base/common/src/com/netscape/cmscore/util/OsSubsystem.java
+++ /dev/null
@@ -1,488 +0,0 @@
-// --- BEGIN COPYRIGHT BLOCK ---
-// This program is free software; you can redistribute it and/or modify
-// it under the terms of the GNU General Public License as published by
-// the Free Software Foundation; version 2 of the License.
-//
-// This program is distributed in the hope that it will be useful,
-// but WITHOUT ANY WARRANTY; without even the implied warranty of
-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-// GNU General Public License for more details.
-//
-// You should have received a copy of the GNU General Public License along
-// with this program; if not, write to the Free Software Foundation, Inc.,
-// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
-//
-// (C) 2007 Red Hat, Inc.
-// All rights reserved.
-// --- END COPYRIGHT BLOCK ---
-package com.netscape.cmscore.util;
-
-
-import java.io.*;
-import java.util.*;
-import com.netscape.certsrv.logging.*;
-import com.netscape.certsrv.base.*;
-import com.netscape.certsrv.base.ISubsystem;
-import com.netscape.certsrv.base.IConfigStore;
-import com.netscape.certsrv.base.EBaseException;
-import com.netscape.certsrv.apps.*;
-import com.netscape.cmscore.base.*;
-import com.netscape.osutil.*;
-
-
-/**
- * This object contains the OS independent interfaces.  It's currently
- * used for Unix signal and user handling, but could eventually be extended
- * for NT interfaces.
- * <P>
- *
- * @author mikep
- * @version $Revision$, $Date$
- */
-public final class OsSubsystem implements ISubsystem {
-
-    public static final String ID = "os";
-    protected IConfigStore mConfig;
-    protected String mInstanceDir;
-    protected ISubsystem mOwner;
-    protected ILogger mLogger = null;
-    protected static SignalThread mSignalThread = null;
-
-    private static final String PROP_OS = "os";
-    private static final String PROP_USERID = "userid";
-
-    // singleton enforcement
-
-    private static OsSubsystem mInstance = new OsSubsystem();
-
-    public static OsSubsystem getInstance() {
-        return mInstance;
-    }
-
-    // end singleton enforcement.
-
-    /**
-     * Constructor for an OS subsystem
-     */
-    private OsSubsystem() {
-    }
-
-    /**
-     * Retrieves subsystem name.
-     */
-    public String getId() {
-        return ID;
-    }
-
-    public void setId(String id) throws EBaseException {
-        throw new EBaseException(CMS.getUserMessage("CMS_BASE_INVALID_OPERATION"));
-    }
-
-    /**
-     * Initializes this subsystem with the given configuration
-     * store.
-     * <P>
-     *
-     * @param owner owner of this subsystem
-     * @param config configuration store
-     * @exception EBaseException failed to initialize
-     */
-    public void init(ISubsystem owner, IConfigStore config)
-        throws EBaseException {
-
-        mOwner = owner;
-        mConfig = config;
-        mLogger = CMS.getLogger();
-
-        mInstanceDir = CMS.getConfigStore().getString("instanceRoot");
-
-        // We currently only deal with Unix and NT
-        if (isUnix()) {
-            //initUnix();
-        } else {
-            initNT();
-        }
-        try {
-            //System.out.println(" The dir I'm seeing is " + mInstanceDir);
-            String pidName = mInstanceDir + File.separator + "config" + File.separator + "cert-pid";
-            BufferedWriter pidOut = new BufferedWriter(new FileWriter(pidName));
-            int pid = OsSubsystem.getpid();
-
-            pidOut.write(Integer.toString(pid));
-            pidOut.close();
-            OSUtil.getFileWriteLock(pidName);
-        } catch (Exception e) {
-            //XX to stderr XXXXXX
-            //e.printStackTrace();
-        }
-    }
-
-    /**
-     * Starts up OS
-     */
-    public void startup() throws EBaseException {
-        if (isUnix()) {
-            String pf = mConfig.getString("pidFile", null);
-
-            if (pf == null) {
-                return; // development environment does not rely on this
-            }
-            // dont ever call detach in Java environment,
-            // it does a fork()
-            // LibC.detach();
-
-            // need to do pid here, pid will be changed after detach
-            int pid = LibC.getpid();
-            String pidStr = Integer.toString(pid);
-
-            try {
-                FileOutputStream fos = new FileOutputStream(pf);
-
-                fos.write(pidStr.getBytes());
-                fos.close();
-            } catch (IOException e) {
-
-                /*LogDoc
-                 *
-                 * @phase start OS subsystem
-                 * @message OS: <exception thrown>
-                 */
-                mLogger.log(ILogger.EV_SYSTEM, ILogger.S_OTHER,
-                    ILogger.LL_FAILURE, "OS: " + e.toString());
-            }
-        }
-    }
-
-    /**
-     * Returns the process ID of the Certificate Server process. Works
-     * on Unix and NT.
-     */
-    public static int getpid() {
-        if (isUnix()) {
-            return LibC.getpid();
-        } else {
-            return OSUtil.getNTpid();
-        }
-    }
-
-    /**
-     * Hooks up unix signals.
-     */
-    private void initUnix() throws EBaseException {
-        // Set up signal handling.  We pretty much exit on anything
-        // Signal.watch(Signal.SIGHUP); 
-        // Signal.watch(Signal.SIGTERM);
-        // Signal.watch(Signal.SIGINT);
-        // mSignalThread = new SignalThread();
-        // mSignalThread.setDaemon(true);
-        // mSignalThread.start();
-
-        Signal.addSignalListener(Signal.SIGHUP, new SIGHUPListener(this)); 
-        Signal.addSignalListener(Signal.SIGTERM, new SIGTERMListener(this)); 
-        Signal.addSignalListener(Signal.SIGINT, new SIGINTListener(this)); 
-
-        /* Increase the maximum number of file descriptors */
-        int i = mConfig.getInteger("maxFiles", 
-                ResourceLimit.getHardLimit(ResourceLimit.RLIMIT_NOFILE));
-
-        ResourceLimit.setLimits(ResourceLimit.RLIMIT_NOFILE,
-            i, ResourceLimit.getHardLimit(ResourceLimit.RLIMIT_NOFILE));
-
-        // write current pid to specified file
-        String pf = mConfig.getString("pidFile", null);
-
-        if (pf == null) {
-            return; // development environment does not rely on this
-        }
-        File pidFile = new File(pf);
-
-        if (pidFile.exists()) {
-            throw new EBaseException(CMS.getUserMessage("CMS_BASE_PID_EXIST"));
-        }
-    }
-
-    /**
-     * Used to change the process user id usually called after the appropriate 
-     * network ports have been opened.
-     */
-    public void setUserId() throws EBaseException {
-        if (!isUnix())
-            return;
-
-        String userid;
-
-        userid = mConfig.getString(PROP_USERID, null);
-        String id = String.valueOf(UserID.get());
-
-        // Change the userid to the prefered Unix user
-        if (userid == null) {
-
-            /*LogDoc
-             *
-             * @phase set user id
-             * @arg0 default user id
-             */
-            mLogger.log(ILogger.EV_SYSTEM, ILogger.S_OTHER,
-                ILogger.LL_FAILURE, 
-                "OS: No user id in config file.  Running as {0}", id);
-        } else {
-            Object[] params = {userid, id};
-
-            try {
-                UserID.set(userid);
-            } catch (IllegalArgumentException e) {
-
-                /*LogDoc
-                 *
-                 * @phase set user id
-                 * @arg0 supplied user id in config
-                 * @arg1 default user id
-                 */
-                mLogger.log(ILogger.EV_SYSTEM, ILogger.S_OTHER, 
-                    ILogger.LL_FAILURE,
-                    "OS: No such user as {0}.  Running as {1}", params);
-            } catch (SecurityException e) {
-
-                /*LogDoc
-                 *
-                 * @phase set user id
-                 * @arg0 supplied user id in config
-                 * @arg1 default user id
-                 */
-                mLogger.log(ILogger.EV_SYSTEM, ILogger.S_OTHER,
-                    ILogger.LL_FAILURE, 
-                    "OS: Can't change process uid to {0}. Running as {1}", 
-                    params);
-            }
-        }
-    }
-
-    private void initNT() {
-    }
-
-    /**
-     * Stops the watchdog.  You need to call this if you want the
-     * server to really shutdown, otherwise the watchdog will just
-     * restart us.
-     * <P>
-     */
-    public static void stop() {
-        if (isUnix()) {
-            shutdownUnix();
-            Signal.send(LibC.getppid(), Signal.SIGTERM);
-        } else {
-
-            /*LogDoc
-             *
-             * @phase stop watchdog
-             */
-            CMS.getLogger().log(ILogger.EV_SYSTEM, ILogger.S_OTHER,
-                ILogger.LL_INFO, 
-                "OS: stop the NT watchdog!");
-        }
-    }
-
-    /**
-     * Stops this system.
-     * <P>
-     */
-    public void shutdown() {
-        if (isUnix()) {
-            shutdownUnix();
-        } else {
-            shutdownNT();
-        }
-    }
-
-    /**
-     * Shutdown the unix system handlers
-     * <P>
-     */
-    private static void shutdownUnix() {
-
-        // Don't accidentally stop this thread
-        //if (Thread.currentThread() != mSignalThread && mSignalThread != null) {
-        //	mSignalThread.stop();
-        //	mSignalThread = null;
-        //}
-		
-        /* Don't release this signals to protect the process
-         Signal.release(Signal.SIGHUP); 
-         Signal.release(Signal.SIGTERM);
-         Signal.release(Signal.SIGINT);
-         */
-    }
-
-    /**
-     * Shutdown the NT system handlers
-     * <P>
-     */
-    private void shutdownNT() {
-    }
-
-    /**
-     * Restart the server
-     * <P>
-     */
-    public void restart() {
-
-        /**
-         if (isUnix()) {
-         restartUnix();
-         } else {
-         restartNT();
-         }
-         **/
-    }
-
-    /**
-     * Unix restart
-     * <P>
-     */
-    private void restartUnix() {
-        // Tell watch dog to restart us
-        int ppid = LibC.getppid();
-
-        Signal.send(ppid, Signal.SIGHUP);
-    }
-
-    /**
-     * NT restart
-     * <P>
-     */
-    private void restartNT() {
-    }
-
-    /**
-     * Returns the root configuration storage of this system.
-     * <P>
-     *
-     * @return configuration store of this subsystem
-     */
-    public IConfigStore getConfigStore() {
-        return mConfig;
-    }
-
-    /**
-     * A universal routine to decide if we are Unix or something else.
-     * This is mostly used for signal handling and uids.
-     *
-     * <P>
-     * @return true if these OS the JavaVM is running on is some Unix varient
-     */
-    public static boolean isUnix() {
-        // XXX What about MacOS?
-        return (File.separatorChar == '/');
-    }
-
-    /**
-     * Unix signal thread.  Sleep for a second and then check on the
-     * signals we're interested in.  If one is set, do the right stuff
-     */
-    final class SignalThread extends Thread {
-
-        /**
-         * Signal thread constructor
-         */
-        public SignalThread() {
-            super();
-            super.setName("OsSignal-" + (Thread.activeCount() + 1));
-        }
-
-        /**
-         * Check for signal changes every second
-         */
-        public void run() {
-            while (true) {
-                // Sleep for the interval and then check for caught signals
-                // synchronized (Thread.this) {
-                synchronized (this) {
-                    try {
-                        // Thread.this.wait(1000);
-                        this.wait(1000);
-                    } catch (InterruptedException e) {
-                        // Not very interesting...
-                    }
-                }
-
-                // wants us to exit?
-                if (Signal.caught(Signal.SIGINT) > 0 ||
-                    Signal.caught(Signal.SIGTERM) > 0) {
-
-                    /*LogDoc
-                     *
-                     * @phase watchdog check
-                     */
-                    mLogger.log(ILogger.EV_SYSTEM, 
-                        ILogger.S_OTHER, 
-                        ILogger.LL_INFO,
-                        "OS: Received shutdown signal");
-                    SubsystemRegistry.getInstance().get("MAIN").shutdown();
-                    return;
-                }
-
-                // Tell to restart us
-                if (Signal.caught(Signal.SIGHUP) > 0) {
-
-                    /*LogDoc
-                     *
-                     * @phase watchdog check
-                     */
-                    mLogger.log(ILogger.EV_SYSTEM, 
-                        ILogger.S_OTHER, 
-                        ILogger.LL_INFO,
-                        "OS: Received restart signal");
-                    restart();
-                    return;
-                }
-
-            }
-        }
-
-    }
-}
-
-
-class SIGTERMListener extends SignalListener {
-    private OsSubsystem mOS;
-    public SIGTERMListener(OsSubsystem os) {
-        mOS = os;
-    }
-
-    public void process() {
-        System.out.println("SIGTERMListener process");
-        // XXX - temp, should call shutdown
-        System.exit(0);
-        //PKIServer.getPKIServer().shutdown();
-    }
-}
-
-
-class SIGINTListener extends SignalListener {
-    private OsSubsystem mOS;
-    public SIGINTListener(OsSubsystem os) {
-        mOS = os;
-    }
-
-    public void process() {
-        System.out.println("SIGINTListener process");
-        // XXX - temp, should call shutdown
-        System.exit(0);
-        //PKIServer.getPKIServer().shutdown();
-    }
-}
-
-
-class SIGHUPListener extends SignalListener {
-    private OsSubsystem mOS;
-    public SIGHUPListener(OsSubsystem os) {
-        mOS = os;
-    }
-
-    public void process() {
-        System.out.println("SIGHUPListener process");
-        // XXX - temp, should call shutdown
-        // System.exit(0);
-        //PKIServer.getPKIServer().shutdown();
-    }
-}
